{
	"info": {
		"_postman_id": "b8ab989a-67fa-45cb-81b4-b26448c0eb05",
		"name": "User_Server",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "24259607"
	},
	"item": [
		{
			"name": "Register",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"health_id\":\"{{health_id}}\",\r\n    \"email\":\"{{patient_email}}\",\r\n    \"password\":12345\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost/api/v1/user/auth/register"
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var token = jsonData.token;\r",
							"var healthId = jsonData.health_id;\r",
							"\r",
							"pm.globals.set(\"USER_TOKEN\", token);\r",
							"pm.globals.set(\"health_id\", healthId);\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 202\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(202);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - fullname, healthId, and token\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.fullname).to.exist;\r",
							"    pm.expect(responseData.healthId).to.exist;\r",
							"    pm.expect(responseData.token).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"HealthId is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.healthId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"HealthId should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"health_id\":\"{{health_id}}\",\r\n    \"password\":\"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost/api/v1/user/auth/login"
			},
			"response": []
		},
		{
			"name": "Create Appointment",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"healthcare_name\": \"{{healthcare_name}}\",\r\n    \"healthcare_id\": \"{{healthcare_id}}\",\r\n    \"appointment_date\":\"30-02-2025\",\r\n    \"appointment_time\":\"10:00 AM T0 12:00 PM\",\r\n    \"department\":\"Dentist Deparment\",\r\n    \"note\":\"status testing goes here...\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost/api/v1/user/appointment/create"
			},
			"response": []
		},
		{
			"name": "Get Appointments",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/api/v1/user/appointment/fetch",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"v1",
						"user",
						"appointment",
						"fetch"
					],
					"query": [
						{
							"key": "limit",
							"value": "5",
							"disabled": true
						},
						{
							"key": "status",
							"value": "Pending",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"Validate the biodata object schema\", function () {\r",
							"//     const responseData = pm.response.json();\r",
							"    \r",
							"//     pm.expect(responseData.biodata).to.be.an('object');\r",
							"//     pm.expect(responseData.biodata.health_id).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.fname).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.middlename).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.lname).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.sex).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.dob).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.bloodgrp).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.bmi).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.marriage_status).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.weight).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.email).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.mobilenumber).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.aadhaar_number).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.primary_location).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.sibling).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.twin).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.fathername).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.mothername).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.emergencynumber).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.created_at).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.updated_at).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.address).to.be.an('object');\r",
							"//     pm.expect(responseData.biodata.address.country).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.address.state).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.address.city).to.be.a('string');\r",
							"//     pm.expect(responseData.biodata.address.landmark).to.be.a('string');\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Address object contains the required fields - country, state, city, and landmark\", function () {\r",
							"//     const responseData = pm.response.json();\r",
							"    \r",
							"//     pm.expect(responseData.address).to.be.an('object');\r",
							"//     pm.expect(responseData.address).to.include.all.keys('country', 'state', 'city', 'landmark');\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"RefreshIn field is present in the response\", function () {\r",
							"//     const responseData = pm.response.json();\r",
							"    \r",
							"//     pm.expect(responseData).to.have.property('refreshIn');\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/api/v1/user/info?cache=true",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"v1",
						"user",
						"info"
					],
					"query": [
						{
							"key": "cache",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Records",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/api/v1/user/issue?limit=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"v1",
						"user",
						"issue"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "severity",
							"value": "Low",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Preferances",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "http://localhost/api/v1/user/pref/get"
			},
			"response": []
		},
		{
			"name": "Update Preferances",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"view_permission\": true,\r\n    \"locked_account\": false,\r\n    \"email\": \"Every Event\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost/api/v1/user/pref/update"
			},
			"response": []
		},
		{
			"name": "Stats",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "http://localhost/api/v1/user/stats"
			},
			"response": []
		},
		{
			"name": "[Logs] Records Viewed",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/api/v1/user/logs/records/viewed?limit=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"v1",
						"user",
						"logs",
						"records",
						"viewed"
					],
					"query": [
						{
							"key": "limit",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Logs] Records Created",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/api/v1/user/logs/records/created?limit=3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"v1",
						"user",
						"logs",
						"records",
						"created"
					],
					"query": [
						{
							"key": "limit",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Logs] Biodata Created",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/api/v1/user/logs/info/created?limit=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"v1",
						"user",
						"logs",
						"info",
						"created"
					],
					"query": [
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Logs]  Biodata Viewed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Viewed biodata array exists and is not empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.viewed_biodata).to.exist.and.to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each object in 'viewed_biodata' contains required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.viewed_biodata).to.be.an('array');\r",
							"    responseData.viewed_biodata.forEach(function(entry) {\r",
							"        pm.expect(entry).to.have.property('_id');\r",
							"        pm.expect(entry).to.have.property('category');\r",
							"        pm.expect(entry).to.have.property('email');\r",
							"        pm.expect(entry).to.have.property('healthId');\r",
							"        pm.expect(entry).to.have.property('healthcareId');\r",
							"        pm.expect(entry).to.have.property('healthcare_name');\r",
							"        pm.expect(entry).to.have.property('patient_name');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Fetched field is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.fetched).to.be.a('number').and.to.satisfy((value) => value >= 0, \"Fetched value should be a non-negative integer\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/api/v1/user/logs/info/viewed?limit=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"v1",
						"user",
						"logs",
						"info",
						"viewed"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Find Hospital Name",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/api/v1/user/appointment/healthcare?limit=5&name=wiza",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"v1",
						"user",
						"appointment",
						"healthcare"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "name",
							"value": "wiza"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get HealthCare Details",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{USER_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/api/v1/user/appointment/healthcare/search?healthcare_id={{healthcare_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"v1",
						"user",
						"appointment",
						"healthcare",
						"search"
					],
					"query": [
						{
							"key": "healthcare_id",
							"value": "{{healthcare_id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}